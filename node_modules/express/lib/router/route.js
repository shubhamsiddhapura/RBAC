/*!
 * express
 * MIT Licensed
 */

'use strict';

/**
 * Module dependencies.
 * @private
 */

var debug = require('debug')('express:router:route');
var flatten = require('array-flatten');
var Layer = require('./layer');
var methods = require('methods');

/**
 * Module exports.
 * @public
 */

module.exports = Route;

/**
 * Initialize `Route` with the given `path`.
 *
 * @param {String} path
 * @public
 */
function Route(path) {
  this.path = path;
  this.stack = [];
  this.methods = {};
  debug('new %o', path);
}

/**
 * Determine if the route handles a given method.
 * @private
 */
Route.prototype._handles_method = function (method) {
  var name = typeof method === 'string' ? method.toLowerCase() : method;
  if (name === 'head' && !this.methods['head']) {
    name = 'get';
  }
  return Boolean(this.methods[name] || this.methods._all);
};

/**
 * Dispatch req, res into this route.
 * @private
 */
Route.prototype.dispatch = function (req, res, done) {
  var idx = 0;
  var stack = this.stack;
  var method = req.method.toLowerCase();

  if (method === 'head' && !this.methods['head']) {
    method = 'get';
  }

  req.route = this;

  (function next(err) {
    if (err && err === 'route') return done();
    if (err && err === 'router') return done(err);

    var layer = stack[idx++];
    if (!layer) return done(err);

    if (layer.method && layer.method !== method) {
      return next(err);
    }

    if (err) {
      layer.handle_error(err, req, res, next);
    } else {
      layer.handle_request(req, res, next);
    }
  })();
};

/**
 * Add a handler for all HTTP verbs to this route.
 *
 * @param {function} handler
 * @return {Route} for chaining
 * @public
 */
Route.prototype.all = function () {
  var handles = flatten(Array.prototype.slice.call(arguments));
  handles.forEach((handle) => {
    if (typeof handle !== 'function') {
      throw new TypeError('Route.all() requires a callback function.');
    }
    var layer = new Layer('/', {}, handle);
    this.stack.push(layer);
  });

  this.methods._all = true;
  return this;
};

/**
 * Register handlers for specific HTTP methods.
 */
methods.forEach(function (method) {
  Route.prototype[method] = function () {
    var handles = flatten(Array.prototype.slice.call(arguments));
    handles.forEach((handle) => {
      if (typeof handle !== 'function') {
        throw new TypeError(`Route.${method}() requires a callback function.`);
      }
      debug('%s %o', method, this.path);
      var layer = new Layer('/', {}, handle);
      layer.method = method;
      this.stack.push(layer);
    });

    this.methods[method] = true;
    return this;
  };
});
